#pragma checksum "C:\Users\Lee\source\repos\fast-fluent\blazorlib\BFUList.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "53a373748b0de33a843c4cf12d73f08baf14f198"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorFluentUi
{
    #line hidden
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Lee\source\repos\fast-fluent\blazorlib\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Lee\source\repos\fast-fluent\blazorlib\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Lee\source\repos\fast-fluent\blazorlib\BFUList.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
    public partial class BFUList<TItem> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 6 "C:\Users\Lee\source\repos\fast-fluent\blazorlib\BFUList.razor"
      
    private ElementReference fluentList;
    private bool jsAvailable;
    private IReadOnlyCollection<TItem> items;

    [Inject] private IJSRuntime JSRuntime {get;set;}
    [Parameter] public IReadOnlyCollection<TItem> Items {get; set;} 
//    [Parameter] public string Label {get; set;}
//    [Parameter] public bool Required {get; set;}


    protected override async Task OnParametersSetAsync()
    {
        if (items != Items)
        {
            items = Items;
            if (jsAvailable)
            {
                await JSRuntime.InvokeVoidAsync("BlazorFluentUiList.setList", fluentList, Items);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsAvailable=true;
            if (Items != null)
            {
                await JSRuntime.InvokeVoidAsync("BlazorFluentUiList.setList", fluentList, Items);
            }
        }
        

    }
    

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
